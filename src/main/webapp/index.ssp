<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>inDexter - Code Intelligence</title>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
<!--
  <link rel="stylesheet" href="/css/baseline.css" type="text/css" media="screen" title="no title" charset="utf-8">
  <link rel="stylesheet" href="/css/styles.css" type="text/css" media="screen" title="no title" charset="utf-8">
-->
  <link rel="stylesheet" href="/css/simple.css" type="text/css" media="screen" title="no title" charset="utf-8">
  <link href='http://fonts.googleapis.com/css?family=Puritan' rel='stylesheet' type='text/css'>
  <script src="/js/underscore.js" type="text/javascript" charset="utf-8"></script>
  <script src="/js/mustache.js" type="text/javascript" charset="utf-8"></script>
  <script src="/js/jquery.js" type="text/javascript" charset="utf-8"></script>
  <script src="js/backbone.js" type="text/javascript" charset="utf-8"></script>
  <script src="js/easydate.js" type="text/javascript" charset="utf-8"></script>
  <script src="/js/app.js" type="text/javascript" charset="utf-8"></script>
  <script src="js/lib/codemirror.js"></script>
  <script src="js/mode/clike/clike.js"></script>
  <link rel="stylesheet" href="js/lib/codemirror.css">
  <link rel="stylesheet" href="js/mode/clike/clike.css">
  <style type="text/css">
    .CodeMirror {border-top: 1px solid black; border-bottom: 1px solid black;}
    .activeline {background: #f0fcff !important;}
  </style>
</head>
<body>

<!--

 __       __  .__   __.  __  ___  _______  _______   __  .__   __. 
|  |     |  | |  \ |  | |  |/  / |   ____||       \ |  | |  \ |  | 
|  |     |  | |   \|  | |  '  /  |  |__   |  .--.  ||  | |   \|  | 
|  |     |  | |  . `  | |    <   |   __|  |  |  |  ||  | |  . `  | 
|  `----.|  | |  |\   | |  .  \  |  |____ |  '--'  ||  | |  |\   | 
|_______||__| |__| \__| |__|\__\ |_______||_______/ |__| |__| \__| 

You like reading source code?, like to hack and build cool stuff?

We're hiring:

  http://www.linkedin.com/static?key=jobs_open

-->
  <h2>inDexter: Code Intelligence</h2>
  <p>m=[method] f=[field] n=[namespace (may be partial)] i=[interface] c=[constructor] [keywords]</p>
  <div id="main" class="main">
    <div class="">
      <!-- Search app -->
      <div id="chirper-search-app">
        <form action="/" id="search-form">
          <input type="text" name="q" autocomplete="off" id="q" placeholder="Search yer c0d3z" />
          <button class="search-button">Search</button>
        </form>
        <div class="searchResults scrollable">
          <div id="found-classes"></div>
          <div id="total-classes"></div>
          <div>
            <ul id="tweets">
            </ul>
          </div>
        </div>
      </div>
      <!-- End Search app -->
      <div class="resultEditor" id="">
      <form><textarea id="code" name="code">
  public static void main(String[] args)
  {
    String bootstrapUrl = "tcp://localhost:6666";
    StoreClientFactory factory = new SocketStoreClientFactory(new ClientConfig().setBootstrapUrls(bootstrapUrl));
    StoreClient client = factory.getStoreClient("tweets");

    Properties props = new Properties();
    props.put("zk.connect", "127.0.0.1:2181");
    props.put("serializer.class", "kafka.serializer.StringEncoder");
    ProducerConfig config = new ProducerConfig(props);
    Producer<String, String> producer = new Producer<String, String>(config);

    processData(
      "/Users/bguarrac/network-indexter/sensei.json",
      "/Users/bguarrac/network-indexter/meta.json",
      client,
      producer,
      "tweets");
  }
      </textarea></form>

    <script>
  var editor;

editor = CodeMirror.fromTextArea(document.getElementById("code"), {
  mode: "text/x-java",
  readOnly: true,
  lineNumbers: true,
  matchBrackets: true,
  onCursorActivity: function() {
//    editor.setLineClass(hlLine, null);
//    hlLine = editor.setLineClass(editor.getCursor().line, "activeline");
  },
  onChange: function() {
    var q = $('#q').val();
    if (q != "")
    {
      $.getJSON('/store?q='+masterHashId+"_META",
            function(data) {
              moveToFirstHighlight = true;
              applyHighlights(data);
            }
      );
    }
  }
});

var hlLine;
var moveToFirstHighlight = false;

String.prototype.startsWith = function(str){
    return (this.toLowerCase().indexOf(str.toLowerCase()) >= 0);
}

var highlight = function(query, arr)
{
  if (query == undefined) return;
  $.each(arr, function(index, value) {
    var name = value.name;
    if (name == undefined) return true;
    if (name.startsWith(query)) {
      start = {line: value.loc.start.line-1, ch: value.loc.start.ch-1};
      stop = {line: value.loc.stop.line-1, ch: value.loc.stop.ch-1};
      editor.markText(start, stop, "texthighlight");
      if (moveToFirstHighlight) {
        editor.setCursor(start);
        editor.focus();
        moveToFirstHighlight = false;
      }
    }
  });
}

var masterHashId ;

var openFile = function(hashId) {
  masterHashId = hashId;
  $.ajax({url: '/store?q='+hashId,
        type: 'GET',
        success: function(data) {
          editor.setValue(data);
        }
    });
}

var getSearchCommands = function() {
  var rawQuery = $("#q").val();
  var parts = rawQuery.split(" ");
  var cmds = {};
  $.each(parts, function(index, value) {
    subparts = value.split("=");
    if (subparts.length > 1)
    {
      if (subparts[0] == 'm') {
        cmds["methods"] = subparts[1];
      } else if (subparts[0] == 'i') {
        cmds["interfaces"]=subparts[1];
      } else if (subparts[0] == 'c') {
        cmds["constructors"]=subparts[1];
      } else if (subparts[0] == 'n') {
        cmds["name"] = subparts[1];
      } else if (subparts[0] == 'f') {
        cmds["fields"] = subparts[1];
      }
    }
    else
    {
      cmds["keywords"] = subparts[0];
    }
  });
  return cmds;
}

var applyHighlights = function(data) {
  cmds = getSearchCommands();
  highlight(cmds["methods"] == undefined ? cmds["keywords"] : cmds["methods"], data.methods);
  highlight(cmds["interfaces"] == undefined ? cmds["keywords"] : cmds["interfaces"], data.interfaces);
  highlight(cmds["fields"] == undefined ? cmds["keywords"] : cmds["fields"], data.fields);
  highlight(cmds["constructors"] == undefined ? cmds["keywords"] : cmds["constructors"], data.constructors);
}

</script>

      <div class="main-divider"></div>
    </div>
  </div>

<!-- Mustache JS templates -->
<script type="text/html" charset="utf-8" id="tweet-view">
  <div class="tweet">
  {{#status}}
    {{#user}}
      <div class="user"><img src="{{profile_image_url}}"/> {{screen_name}}</div>
    {{/user}}
    <div class="body"><a href="#" onclick="openFile('{{hashId}}');">{{name}}</a></div>
  {{/status}}
  </div>
</script>
<!-- End Mustache JS templates -->

</body>
</html>
